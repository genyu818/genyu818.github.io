<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java并发 on WANG, HENGYU</title>
    <link>http://genyu818.github.io/tags/java%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in Java并发 on WANG, HENGYU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 13:16:35 +0800</lastBuildDate>
    
	<atom:link href="http://genyu818.github.io/tags/java%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出Java多线程  原理篇</title>
      <link>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8E%9F%E7%90%86%E7%AF%87/</link>
      <pubDate>Mon, 13 Jul 2020 13:16:35 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8E%9F%E7%90%86%E7%AF%87/</guid>
      <description>1. Java内存模型基础知识 1.1 并发编程模型的两个关键问题  线程间如何通信，线程如何传递数据 线程间如何同步，不同的线程如何决定线程操作的顺序  一般有两种模型来解决这种问题
 消息传递并发模型，线程之间之间没有公共状态，通信是显式，同步在通信之中是隐式。 共享内存并发模型，线程之间有公共状态，同步需要设定线程之间的互斥状态是显式，传递数据在公共内存是隐士。  在Java中，使用的是共享内存并发模型。
1.2 Java内存模型的抽象结构 1.2.1 运行时的内存划分 我们可以看到对于每一个线程来说，栈是私有的，堆是共有的。也就是说栈中的变量（局部变量，方法定义参数，异常处理参数）不会在内存中共享，也就不会有内存可见性的问题。而在堆中的变量是共享的，即共享变量。
所以内存可见性是针对共享变量即堆中的变量。
1.2.2 内存共享 即使堆中变量是共享的，为什么堆中的内存往往不可见呢？这是因为现在计算机为了速度，设置了一个高速缓存区中缓存共享变量，cpu往往访问高速缓存区会比访问内存速度要快。
Java线程之间的通信是由Java内存模型控制（JMM），从抽象角度来看JMM定义了线程和内存之间的抽象关系，JMM抽象示意图如下所示
我们可以看到
 所有的共享变量在主内存中 每个线程中保留着共享变量的副本（我理解为 共享变量的副本就是该线程要同步到主内存中的内容） 如果线程A想与线程B进行通信的话  线程A将本地内存A中更新的共享变量刷新到主内存中 线程B到主内存中去读取线程A的共享副本更新过去的共享变量    所以线程B无法直接去读取线程A中的内容，而是通过主内存进行操作。
**注意JMM中规定线程之间的通信必须要在本地内存中进行，不能在线程的主内存中进行。**这就是说线程B不是直接去读取主内存中的共享内容，而是本地内存A将共享副本更新到共享内存之后，共享内存会同步更新内容到本地内存B，此时线程B去本地内存B去查找并发现共享副本发生变换，然后线程B才会读取共享内存B中的内容。
那么怎么知道这个共享变量的被其他线程更新了呢？这就是JMM的功劳了，也是JMM存在的必要性之一。JMM通过控制主内存与每个线程的本地内存之间的交互，来提供内存可见性保证。
1.2.3 JMM和Java内存区划分的区别和联系 实际上，他们表达的是同一种含义，这里不做区分。
2. 重排序和happens-before 2.1 什么是重排序 计算机在执行程序时候，会利用重排序来提升性能。
怎么来理解指令重排序能提高性能呢？
简单地说，每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此，流水线技术产生了，它的原理是指令1还没有执行完，就可以开始执行指令2，而不用等到指令1执行结束之后再执行指令2，这样就大大提高了效率。
但是，流水线技术最害怕中断，恢复中断的代价是比较大的，所以我们要想尽办法不让流水线中断。指令重排就是减少中断的一种技术。
我们分析一下下面这个代码的执行情况：
a = b + c; d = e - f ; 先加载b，c，然后再执行add（b，c），这个过程中我们必须要等待b，c装载结束才能执行add（）。同理后面相似的操作都会增加等待过程即停顿，这样就会一直降低计算机的执行效率。
为了减少停顿，我们可以先加载e，f在执行add（），这样对程序没有影响却减少了停顿。
指令重排对提升cpu性能有着至关重要的作用，虽然可能会带来乱序的问题，但是我们完全可以接受。
指令重排一般分为以下三种：
  编译器优化重排
编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</description>
    </item>
    
    <item>
      <title>深入浅出Java多线程  基础篇</title>
      <link>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
      <pubDate>Fri, 10 Jul 2020 08:49:43 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
      <description>本文是整理对深入浅出Java多线程该开源书籍的读书笔记。和本书的结构相同总共会有三篇文章，基础篇，原理篇，JDK工具篇。
进程和线程的一些发展背景，发展曲线不在这次讨论范围，如果有兴趣的胖友可以去自行Google。其次一些过于简单的内容，类如Api的调用，我就没进行记录，大家可以自行查阅，也算是加深自己的印象。
1 进程和线程的定义 对于进程和线程的定义也好，区别也好，网上最经常说的一句话是进程和线程都是一个时间段的描述，是CPU工作时间段的描述。
对上面那句话我们来举个例子加深一下印象，假设我可以最大权力的去控制我的电脑，把所有进程都给清除完，并且我还能正常的运行我指定的软件。我在10：00 —11:00，打开了Dota2，这一个小时里，我们就有了一个进程或者线程（先不管进程还是线程）。现在我准备开一把单排上一下分，我开始了匹配，此时又在第一个进程或者线程下开了一个进程或者线程（感觉像在读绕口令）。那我匹配时间特别长，感觉好无聊呀，这时候我想去看下新出的饰品，点开商城。那这个时候是不是又在第一个进程或者线程下又开了一个进程或者线程呢？毫无疑问，是的。
OK，感觉说的非常拗口，我们来看一个逻辑图。
这个时候是不是能真正的去去理解了进程和线程都是一个时间段的描述，是CPU工作时间段的描述。
2 进程和线程的区别 遍寻网络，最后呢我看到了两篇文章讲的还不错，分为学术以及白话。
2.1 学术篇  进程就是包换上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文 但实际上进程的执行是，进程A得到CPU =》CPU加载上下文，开始执行进程A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这个时候a，b，c就称之为线程。  最后就来一个总结：进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。
2.2 白话篇 我们来做个简单的比喻：进程=火车，线程=车厢
 线程在进程下行进（单纯的车厢无法运行） 一个进程可以包含多个线程（一辆火车可以有多个车厢） 不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘） 同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易） 进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源） 进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢） 进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上） 进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－&amp;ldquo;互斥锁&amp;rdquo; 进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”  3 多线程入门类和接口 3.1 Thread类和Runnable接口 我们来看一下Java中如何实现多线程的。
首先，我们需要有一个“线程”类。JDK提供了Thread类和Runnalble接口来让我们实现自己的“线程”类。
 继承Thread类，并重写run方法； 实现Runnable接口的run方法；  3.1.1 继承Thread类 3.1.2 实现Runnable接口 3.1.3 Thread类的构建方法 Thread类是一个Runnable接口的实现类，我们来看看Thread类的源码。
查看Thread类的构造方法，发现其实是简单调用一个私有的init方法来实现初始化。init的方法签名：
// init方法 private void init(ThreadGroup g, Runnable target, String name, long stackSize, AccessControlContext acc, boolean inheritThreadLocals) // 构造函数调用init方法 public Thread(Runnable target) { init(null, target, &amp;#34;Thread-&amp;#34; + nextThreadNum(), 0); } // 使用在init方法里初始化AccessControlContext类型的私有属性 this.</description>
    </item>
    
  </channel>
</rss>