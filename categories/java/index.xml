<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on WANG, HENGYU</title>
    <link>http://genyu818.github.io/categories/java/</link>
    <description>Recent content in JAVA on WANG, HENGYU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 13:16:35 +0800</lastBuildDate>
    
	<atom:link href="http://genyu818.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出Java多线程  原理篇</title>
      <link>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8E%9F%E7%90%86%E7%AF%87/</link>
      <pubDate>Mon, 13 Jul 2020 13:16:35 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8E%9F%E7%90%86%E7%AF%87/</guid>
      <description>1. Java内存模型基础知识 1.1 并发编程模型的两个关键问题  线程间如何通信，线程如何传递数据 线程间如何同步，不同的线程如何决定线程操作的顺序  一般有两种模型来解决这种问题
 消息传递并发模型，线程之间之间没有公共状态，通信是显式，同步在通信之中是隐式。 共享内存并发模型，线程之间有公共状态，同步需要设定线程之间的互斥状态是显式，传递数据在公共内存是隐士。  在Java中，使用的是共享内存并发模型。
1.2 Java内存模型的抽象结构 1.2.1 运行时的内存划分 我们可以看到对于每一个线程来说，栈是私有的，堆是共有的。也就是说栈中的变量（局部变量，方法定义参数，异常处理参数）不会在内存中共享，也就不会有内存可见性的问题。而在堆中的变量是共享的，即共享变量。
所以内存可见性是针对共享变量即堆中的变量。
1.2.2 内存共享 即使堆中变量是共享的，为什么堆中的内存往往不可见呢？这是因为现在计算机为了速度，设置了一个高速缓存区中缓存共享变量，cpu往往访问高速缓存区会比访问内存速度要快。
Java线程之间的通信是由Java内存模型控制（JMM），从抽象角度来看JMM定义了线程和内存之间的抽象关系，JMM抽象示意图如下所示
我们可以看到
 所有的共享变量在主内存中 每个线程中保留着共享变量的副本（我理解为 共享变量的副本就是该线程要同步到主内存中的内容） 如果线程A想与线程B进行通信的话  线程A将本地内存A中更新的共享变量刷新到主内存中 线程B到主内存中去读取线程A的共享副本更新过去的共享变量    所以线程B无法直接去读取线程A中的内容，而是通过主内存进行操作。
**注意JMM中规定线程之间的通信必须要在本地内存中进行，不能在线程的主内存中进行。**这就是说线程B不是直接去读取主内存中的共享内容，而是本地内存A将共享副本更新到共享内存之后，共享内存会同步更新内容到本地内存B，此时线程B去本地内存B去查找并发现共享副本发生变换，然后线程B才会读取共享内存B中的内容。
那么怎么知道这个共享变量的被其他线程更新了呢？这就是JMM的功劳了，也是JMM存在的必要性之一。JMM通过控制主内存与每个线程的本地内存之间的交互，来提供内存可见性保证。
1.2.3 JMM和Java内存区划分的区别和联系 实际上，他们表达的是同一种含义，这里不做区分。
2. 重排序和happens-before 2.1 什么是重排序 计算机在执行程序时候，会利用重排序来提升性能。
怎么来理解指令重排序能提高性能呢？
简单地说，每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此，流水线技术产生了，它的原理是指令1还没有执行完，就可以开始执行指令2，而不用等到指令1执行结束之后再执行指令2，这样就大大提高了效率。
但是，流水线技术最害怕中断，恢复中断的代价是比较大的，所以我们要想尽办法不让流水线中断。指令重排就是减少中断的一种技术。
我们分析一下下面这个代码的执行情况：
a = b + c; d = e - f ; 先加载b，c，然后再执行add（b，c），这个过程中我们必须要等待b，c装载结束才能执行add（）。同理后面相似的操作都会增加等待过程即停顿，这样就会一直降低计算机的执行效率。
为了减少停顿，我们可以先加载e，f在执行add（），这样对程序没有影响却减少了停顿。
指令重排对提升cpu性能有着至关重要的作用，虽然可能会带来乱序的问题，但是我们完全可以接受。
指令重排一般分为以下三种：
  编译器优化重排
编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</description>
    </item>
    
    <item>
      <title>Java中==和equals的区别</title>
      <link>http://genyu818.github.io/2020/java%E4%B8%AD%E5%92%8Cequals%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 13 Jul 2020 09:17:30 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/java%E4%B8%AD%E5%92%8Cequals%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>最近再写一个逻辑的时候遇到一个小问题，用“==”判断失败，最后改成“equals()”成功，这次对这两个东西给弄清楚
1. ==  对于基本类型byte,short,char,int,long,float,double,boolean，==比较的是它们之间的值 对于引用类型String，Integer等，==比较的是它们内存存放的地址（确切的说是堆内存）  Notes:Java中每new一个对象都会开辟一个新的堆内存。
2.equals() 首先我们要先知道，Java中所有的类都继承于Object这个超类，equals()方法就定义在Object这个超类中，我们来看一下equals（）的源码。
public boolean equals(Object obj){ return this==obj; } 我们可以看到其实equals()就是==，比较的就是对象的存放地址。这好像和我们之前学的不太一样，别急，我们来看下面一段话。
再一些类中，equals()方法被重写了，如Integer，String等，我们来打开String中equals()的源码来看一下。
public boolean equals(Object anObject) { 2 if (this == anObject) { 3 return true; 4 } 5 if (anObject instanceof String) { 6 String anotherString = (String)anObject; 7 int n = value.length; 8 if (n == anotherString.value.length) { 9 char v1[] = value; 10 char v2[] = anotherString.value; 11 int i = 0; 12 while (n-- !</description>
    </item>
    
    <item>
      <title>深入浅出Java多线程  基础篇</title>
      <link>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
      <pubDate>Fri, 10 Jul 2020 08:49:43 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
      <description>本文是整理对深入浅出Java多线程该开源书籍的读书笔记。和本书的结构相同总共会有三篇文章，基础篇，原理篇，JDK工具篇。
进程和线程的一些发展背景，发展曲线不在这次讨论范围，如果有兴趣的胖友可以去自行Google。其次一些过于简单的内容，类如Api的调用，我就没进行记录，大家可以自行查阅，也算是加深自己的印象。
1 进程和线程的定义 对于进程和线程的定义也好，区别也好，网上最经常说的一句话是进程和线程都是一个时间段的描述，是CPU工作时间段的描述。
对上面那句话我们来举个例子加深一下印象，假设我可以最大权力的去控制我的电脑，把所有进程都给清除完，并且我还能正常的运行我指定的软件。我在10：00 —11:00，打开了Dota2，这一个小时里，我们就有了一个进程或者线程（先不管进程还是线程）。现在我准备开一把单排上一下分，我开始了匹配，此时又在第一个进程或者线程下开了一个进程或者线程（感觉像在读绕口令）。那我匹配时间特别长，感觉好无聊呀，这时候我想去看下新出的饰品，点开商城。那这个时候是不是又在第一个进程或者线程下又开了一个进程或者线程呢？毫无疑问，是的。
OK，感觉说的非常拗口，我们来看一个逻辑图。
这个时候是不是能真正的去去理解了进程和线程都是一个时间段的描述，是CPU工作时间段的描述。
2 进程和线程的区别 遍寻网络，最后呢我看到了两篇文章讲的还不错，分为学术以及白话。
2.1 学术篇  进程就是包换上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文 但实际上进程的执行是，进程A得到CPU =》CPU加载上下文，开始执行进程A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这个时候a，b，c就称之为线程。  最后就来一个总结：进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。
2.2 白话篇 我们来做个简单的比喻：进程=火车，线程=车厢
 线程在进程下行进（单纯的车厢无法运行） 一个进程可以包含多个线程（一辆火车可以有多个车厢） 不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘） 同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易） 进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源） 进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢） 进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上） 进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－&amp;ldquo;互斥锁&amp;rdquo; 进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”  3 多线程入门类和接口 3.1 Thread类和Runnable接口 我们来看一下Java中如何实现多线程的。
首先，我们需要有一个“线程”类。JDK提供了Thread类和Runnalble接口来让我们实现自己的“线程”类。
 继承Thread类，并重写run方法； 实现Runnable接口的run方法；  3.1.1 继承Thread类 3.1.2 实现Runnable接口 3.1.3 Thread类的构建方法 Thread类是一个Runnable接口的实现类，我们来看看Thread类的源码。
查看Thread类的构造方法，发现其实是简单调用一个私有的init方法来实现初始化。init的方法签名：
// init方法 private void init(ThreadGroup g, Runnable target, String name, long stackSize, AccessControlContext acc, boolean inheritThreadLocals) // 构造函数调用init方法 public Thread(Runnable target) { init(null, target, &amp;#34;Thread-&amp;#34; + nextThreadNum(), 0); } // 使用在init方法里初始化AccessControlContext类型的私有属性 this.</description>
    </item>
    
    <item>
      <title>Java泛型</title>
      <link>http://genyu818.github.io/2020/java%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Wed, 08 Jul 2020 15:11:08 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/java%E6%B3%9B%E5%9E%8B/</guid>
      <description>听过无数次只有了解Java高级特性才算是入了门，这次我们就来看一下Java的泛型。
1.什么是泛型？ 从各个网站，论坛看过很多关于泛型的讲解，总感觉少点意思，直到看到廖雪峰大神对于泛型的讲解，总算感觉比较透彻。看泛型之前我们先来看一个Java标准库里的ArrayList，我们直接看一下它的设计思路，可以看到实际上ArrayList中实际就是Object[]数组，配合size，以及一些add等操作方法。
public class ArrayList { private Object[] array; private int size; public void add(Object e) {...} public void remove(int index) {...} public Object get(int index) {...} } 但是如果使用ArrayList来存储String类型就会又很多缺点
 需要强制转型（Object -&amp;gt; String） 容易出问题  例如，代码必须这么写：
ArrayList list = new ArrayList(); list.add(&amp;#34;Hello&amp;#34;); // 获取到Object，必须强制转型为String: String first = (String) list.get(0); 如果想避免这些问题，代码应该这样写
public class ArrayList { private String[] array; private int size; public void add(Object e) {...} public void remove(int index) {.</description>
    </item>
    
    <item>
      <title>Java异常</title>
      <link>http://genyu818.github.io/2020/java%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Tue, 07 Jul 2020 13:31:09 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/java%E5%BC%82%E5%B8%B8/</guid>
      <description>JAVA中的异常介绍 异常是什么？ 异常就是阻止程序运行的问题，当程序出现异常时候，系统会自动的生成一个Exception来通知程序程序作出相应的处理。Java的异常类型有很多种。 根据Java异常继承结构，我们可以知道所有的异常类都继承于Throwable类，而该类又有Error类，Exception类两个子类。而Exception类又分为受检查异常和非受检查异常（运行异常）。我们来逐一看一下。
Java异常中的Error Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：我们开发中有时会遇到的OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。
一般来说出现Error我们不应该也无法去处理。
Java中的Exception 上面我们有介绍，Java异常的中的Exception分为受检查异常和运行时异常（不受检查异常）。下面我们展开介绍。
Java中的受检查类 受检查类指，编译器在编译过程中对于受检查异常类必须要进行try&amp;hellip;catch或者throw处理，否则无法通过编译。常见的受检查类包括： IO操作，ClassNotFindException，线程操作等。
Java中的非受检查类（运行时异常） RuntimeException及其子类都统称为非受检查异常，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。
Java异常处理的基本语法 1.try-catch try{ //code that might generate exceptions }catch(Exception e){ //the code of handling exception1 }catch(Exception e){ //the code of handling exception2 } 要明白异常捕获，还要理解监控区域（guarded region）的概念。它是一段可能产生异常的代码，并且后面跟着处理这些异常的代码。
因而可知，上述try-catch所描述的即是监控区域，关键词try后的一对大括号将一块可能发生异常的代码包起来，即为监控区域。Java方法在运行过程中发生了异常，则创建异常对象。将异常抛出监控区域之外，由Java运行时系统负责寻找匹配的catch子句来捕获异常。若有一个catch语句匹配到了，则执行该catch块中的异常处理代码，就不再尝试匹配别的catch块了。
举个例子算术异常：
public class TestException { public static void main(String[] args) { int a = 1; int b = 0; try { // try监控区域  if (b == 0) throw new ArithmeticException(); // 通过throw语句抛出异常  System.</description>
    </item>
    
    <item>
      <title>JAVA反射</title>
      <link>http://genyu818.github.io/categories/java/java%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 03 Jul 2020 12:58:05 +0800</pubDate>
      
      <guid>http://genyu818.github.io/categories/java/java%E5%8F%8D%E5%B0%84/</guid>
      <description>一、 Java中反射的机制 Java反射机制在程序运行时候，对于任意一个类都能动态的获取到类的属性以及方法。反射机制很重要的就是运行时，其使得我们可以在程序运行对未知的.class进行加载，编译，以及探索。 就是说Java程序在加载一个运行时才得知名称的.class文件，然后获悉其构造过程，属性，以及方法。
反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。
二、反射的主要用途 反射最重要的用途就是开发各种通用框架。 很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 Bean），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射，运行时动态加载需要加载的对象。
其次，当我们在使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射
三、反射的作用 我们定义一个FatherClass类， 还有一个SonClass类继承于FatherClass类。如下所示。可以看到测试类中变量以及方法的访问权限不是很规范，是为了更明显得查看测试结果而故意设置的，实际项目中不提倡这么写。
FatherClass.java public class FatherClass { public String mFatherName; public int mFatherAge; public void printFatherMsg(){} } SonClass.java public class SonClass extends FatherClass{ private String mSonName; protected int mSonAge; public String mSonBirthday; public void printSonMsg(){ System.out.println(&amp;#34;Son Msg - name : &amp;#34; + mSonName + &amp;#34;; age : &amp;#34; + mSonAge); } private void setSonName(String name){ mSonName = name; } private void setSonAge(int age){ mSonAge = age; } private int getSonAge(){ return mSonAge; } private String getSonName(){ return mSonName; } } 一、获取类的变量信息 /** * 通过反射获取类的所有变量 */ private static void printFields(){ //1.</description>
    </item>
    
    <item>
      <title>Java反射</title>
      <link>http://genyu818.github.io/2020/java%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 03 Jul 2020 12:58:05 +0800</pubDate>
      
      <guid>http://genyu818.github.io/2020/java%E5%8F%8D%E5%B0%84/</guid>
      <description>一、 Java中反射的机制 Java反射机制在程序运行时候，对于任意一个类都能动态的获取到类的属性以及方法。反射机制很重要的就是运行时，其使得我们可以在程序运行对未知的.class进行加载，编译，以及探索。 就是说Java程序在加载一个运行时才得知名称的.class文件，然后获悉其构造过程，属性，以及方法。
反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。
二、反射的主要用途 反射最重要的用途就是开发各种通用框架。 很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 Bean），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射，运行时动态加载需要加载的对象。
其次，当我们在使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射
三、反射的作用 我们定义一个FatherClass类， 还有一个SonClass类继承于FatherClass类。如下所示。可以看到测试类中变量以及方法的访问权限不是很规范，是为了更明显得查看测试结果而故意设置的，实际项目中不提倡这么写。
FatherClass.java public class FatherClass { public String mFatherName; public int mFatherAge; public void printFatherMsg(){} } SonClass.java public class SonClass extends FatherClass{ private String mSonName; protected int mSonAge; public String mSonBirthday; public void printSonMsg(){ System.out.println(&amp;#34;Son Msg - name : &amp;#34; + mSonName + &amp;#34;; age : &amp;#34; + mSonAge); } private void setSonName(String name){ mSonName = name; } private void setSonAge(int age){ mSonAge = age; } private int getSonAge(){ return mSonAge; } private String getSonName(){ return mSonName; } } 一、获取类的变量信息 /** * 通过反射获取类的所有变量 */ private static void printFields(){ //1.</description>
    </item>
    
  </channel>
</rss>